{"version":3,"sources":["webpack:///./src/templates/authors.tsx","webpack:///./src/components/FullAnchorAuthor.tsx"],"names":["authorNodes","data","allAuthorYaml","edges","title","pathname","Background","map","author","node","key","id","sm","md","FullAnchorAuthorCard","pageQuery","styled","div","Colors","gray100","FullAnchorAuthor","ElevationStyles","elevation2","white","className","t","useTranslation","AvatarWrapper","to","kebabCase","size","src","profileImage","text","AvatarTitle","description","blog","SocialIcon","href","target","alt","github","linkedin","LinkWithLang","TextStyles","subtitle2","a"],"mappings":"2FAAA,sIASe,sBAIT,IAFsBA,EAEtB,EAHJC,KACEC,cAAiBC,MAGnB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,MAAK,aAAgBC,SAAQ,UAClC,kBAACC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,cAGJ,kBAAC,IAAD,KACGN,EAAYO,KAAI,gBAASC,EAAT,EAAGC,KAAH,OACf,kBAAC,IAAD,CAAKC,IAAG,UAAYF,EAAOG,GAAMC,GAAI,GAAIC,GAAI,GAC3C,kBAACC,EAAD,CAAsBN,OAAQA,aAUvC,IAAMO,EAAY,WAiBnBT,EAAaU,IAAOC,IAAV,sEAAGD,CAAH,2CACME,IAAOC,SAIvBL,EAAuBE,YAAOI,KAAV,gFAAGJ,CAAH,0FACtBK,IAAgBC,WAIEJ,IAAOK,Q,kCChE7B,8FAgDeH,IAjC2B,SAAC,GAA0B,IAAxBZ,EAAwB,EAAxBA,OAAQgB,EAAgB,EAAhBA,UAC3CC,EAAMC,cAAND,EAER,OACE,kBAACE,EAAD,CACEC,GAAE,YAAcC,IAAUrB,aAAD,EAACA,EAAQG,IAClCa,UAAWA,GAEX,kBAAC,IAAD,CACEM,KAAM,GACNC,IAAKvB,aAAF,EAAEA,EAAQwB,aACbC,KAAMR,EAAE,iBAAgBjB,aAAjB,EAAiBA,EAAQG,OAElC,kBAACuB,EAAD,KAAcT,EAAE,iBAAgBjB,aAAjB,EAAiBA,EAAQG,MACxC,kBAAC,IAAD,KAAQH,aAAR,EAAQA,EAAQ2B,aACf3B,EAAO4B,MAAwB,KAAhB5B,EAAO4B,MACrB,kBAACC,EAAD,CAAYC,KAAM9B,EAAO4B,KAAMG,OAAO,UACpC,yBAAKR,IAAI,yBAAyBS,IAAI,UAGzChC,EAAOiC,QAA4B,KAAlBjC,EAAOiC,QACvB,kBAACJ,EAAD,CAAYC,KAAM9B,EAAOiC,OAAQF,OAAO,UACtC,yBAAKR,IAAI,2BAA2BS,IAAI,YAG3ChC,EAAOkC,UAAgC,KAApBlC,EAAOkC,UACzB,kBAACL,EAAD,CAAYC,KAAM9B,EAAOkC,SAAUH,OAAO,UACxC,yBAAKR,IAAI,6BAA6BS,IAAI,gBAQpD,IAAMb,EAAgBX,YAAO2B,KAAV,kFAAG3B,CAAH,kFASbkB,EAAclB,IAAOC,IAAV,gFAAGD,CAAH,sBACb4B,IAAWC,WAITR,EAAarB,IAAO8B,EAAV,+EAAG9B,CAAH","file":"component---src-templates-authors-tsx-9c653346807794441ac8.js","sourcesContent":["import { Col, Colors, ElevationStyles, Grid, Headline2, Row } from '@class101/ui';\nimport { graphql } from 'gatsby';\nimport React from 'react';\nimport styled from 'styled-components';\n\nimport FullAnchorAuthor from '../components/FullAnchorAuthor';\nimport Layout from '../components/Layout';\nimport SEO from '../components/SEO';\n\nexport default ({\n  data: {\n    allAuthorYaml: { edges: authorNodes }\n  }\n}) => {\n  return (\n    <Layout>\n      <SEO title={`클래스101 구성원`} pathname={`/tags`} />\n      <Background>\n        <Grid>\n          <Row>\n            <Col>\n              <Headline2>구성원</Headline2>\n            </Col>\n          </Row>\n          <Row>\n            {authorNodes.map(({ node: author }) => (\n              <Col key={`author-${author.id}`} sm={12} md={4}>\n                <FullAnchorAuthorCard author={author} />\n              </Col>\n            ))}\n          </Row>\n        </Grid>\n      </Background>\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query AuthorsQuery {\n    allAuthorYaml {\n      edges {\n        node {\n          id\n          profileImage\n          description\n          github\n          blog\n          linkedin\n        }\n      }\n    }\n  }\n`;\n\nconst Background = styled.div`\n  background-color: ${Colors.gray100};\n  padding-top: 56px;\n`;\n\nconst FullAnchorAuthorCard = styled(FullAnchorAuthor)`\n  ${ElevationStyles.elevation2};\n  border-radius: 3px;\n  padding: 32px 0;\n  height: 240px;\n  background-color: ${Colors.white};\n  margin: 16px 0;\n`;\n","import { Avatar, Body2, TextStyles } from '@class101/ui';\nimport { t } from 'i18next';\nimport kebabCase from 'lodash/kebabCase';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport styled from 'styled-components';\n\nimport { Author } from '../graphql-types';\nimport LinkWithLang from './LinkWithLang';\n\ninterface Props {\n  author: Author;\n  className?: string;\n}\n\nconst FullAnchorAuthor: React.FC<Props> = ({ author, className }) => {\n  const { t } = useTranslation();\n\n  return (\n    <AvatarWrapper\n      to={`/authors/${kebabCase(author?.id)}`}\n      className={className}\n    >\n      <Avatar\n        size={64}\n        src={author?.profileImage}\n        text={t(`profile.name.${author?.id}`)}\n      />\n      <AvatarTitle>{t(`profile.name.${author?.id}`)}</AvatarTitle>\n      <Body2>{author?.description}</Body2>\n      {author.blog && author.blog !== '' && (\n        <SocialIcon href={author.blog} target=\"_blank\">\n          <img src=\"/images/blog-64x64.png\" alt=\"blog\" />\n        </SocialIcon>\n      )}\n      {author.github && author.github !== '' && (\n        <SocialIcon href={author.github} target=\"_blank\">\n          <img src=\"/images/github-64x64.png\" alt=\"github\" />\n        </SocialIcon>\n      )}\n      {author.linkedin && author.linkedin !== '' && (\n        <SocialIcon href={author.linkedin} target=\"_blank\">\n          <img src=\"/images/linkedin-64x64.png\" alt=\"linkedin\" />\n        </SocialIcon>\n      )}\n    </AvatarWrapper>\n  );\n};\nexport default FullAnchorAuthor;\n\nconst AvatarWrapper = styled(LinkWithLang)`\n  text-align: center;\n  display: block;\n  text-decoration: none;\n  &:hover {\n    color: inherit;\n  }\n`;\n\nconst AvatarTitle = styled.div`\n  ${TextStyles.subtitle2};\n  margin: 8px 0;\n`;\n\nconst SocialIcon = styled.a`\n  display: inline-block;\n  margin: 8px;\n  img {\n    margin: 8px 4px 0px 0px;\n    width: 24px;\n  }\n`;\n"],"sourceRoot":""}