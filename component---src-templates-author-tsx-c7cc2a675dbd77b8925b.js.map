{"version":3,"sources":["webpack:///./src/components/AnchorAuthor.tsx","webpack:///./src/components/PostCard.tsx","webpack:///./src/templates/author.tsx"],"names":["AnchorAuthor","author","t","useTranslation","AvatarWrapper","to","kebabCase","id","src","profileImage","text","AvatarText","styled","LinkWithLang","div","TextStyles","caption1","Anchor","PostCard","props","node","slug","fields","frontmatter","title","description","thumbnail","date","excerpt","coverImage","coverImageRatio","CoverRatio","RATIO_4X3","extraTop","CardCaption","extraBottom","Fragment","CardDescription","Caption1","Colors","gray900","gray800","AuthorTemplate","pageContext","data","edges","allMarkdownRemark","map","key","md","lg","pageQuery"],"mappings":"yLA2BeA,EAbuB,SAAC,GAAe,IAAbC,EAAa,EAAbA,OAC/BC,EAAMC,cAAND,EAER,OACE,kBAACE,EAAD,CAAeC,GAAE,YAAcC,IAAUL,aAAD,EAACA,EAAQM,KAC/C,kBAAC,IAAD,CACEC,IAAKP,aAAF,EAAEA,EAAQQ,aACbC,KAAMR,EAAE,iBAAgBD,aAAjB,EAAiBA,EAAQM,OAElC,kBAACI,EAAD,KAAaT,EAAE,iBAAgBD,aAAjB,EAAiBA,EAAQM,QAMvCH,EAAgBQ,YAAOC,KAAV,kFAAGD,CAAH,2DAMbD,EAAaC,IAAOE,IAAV,+EAAGF,CAAH,yBACZG,IAAWC,UCITC,GAFSC,IA3BmB,SAAAC,GAAS,MAOrCA,EALFC,KACYC,EAH2B,EAGrCC,OAAUD,KAH2B,IAIrCE,YAAeC,EAJsB,EAItBA,MAAOC,EAJe,EAIfA,YAAaC,EAJE,EAIFA,UAAWC,EAJT,EAISA,KAAM1B,EAJf,EAIeA,OACpD2B,EALqC,EAKrCA,QAIJ,OACE,kBAACX,EAAD,CAAQZ,GAAE,IAAMgB,GACd,kBAAC,IAAD,CACEQ,WAAYH,EACZI,gBAAiBC,IAAWC,UAC5BR,MAAOA,EACPS,SAAU,kBAACC,EAAD,KAAcP,GACxBQ,YACE,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAD,KAAkBZ,GAAeG,GACjC,kBAAC,EAAD,CAAc3B,OAAQA,SAUnBW,YAAOC,KAAV,uEAAGD,CAAH,yGAUNsB,EAActB,YAAO0B,KAAV,4EAAG1B,CAAH,+BACN2B,IAAOC,SAIZH,EAAkBzB,IAAOE,IAAV,gFAAGF,CAAH,2LACjBG,IAAWC,SACJuB,IAAOE,U,kCCzDlB,8GA+CeC,UA1ByB,SAAAvB,GAAS,IACvCwB,EAAsBxB,EAAtBwB,YAAaC,EAASzB,EAATyB,KAEfC,GADWF,EAATtB,KAENuB,EAAKE,mBAAqBF,EAAKE,kBAAkBD,MAC7CD,EAAKE,kBAAkBD,MACvB,IACN,OACE,kBAAC,IAAD,KAEE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,OAEF,kBAAC,IAAD,KACGA,EAAME,KAAI,gBAAG3B,EAAH,EAAGA,KAAH,OACT,kBAAC,IAAD,CAAK4B,IAAK5B,EAAKE,OAAOD,KAAM4B,GAAI,GAAIC,GAAI,GACtC,kBAAC,IAAD,CAAU9B,KAAMA,YAWvB,IAAM+B,EAAY","file":"component---src-templates-author-tsx-c7cc2a675dbd77b8925b.js","sourcesContent":["import { Avatar, TextStyles } from '@class101/ui';\nimport { t } from 'i18next';\nimport kebabCase from 'lodash/kebabCase';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport styled from 'styled-components';\n\nimport { Author } from '../graphql-types';\nimport LinkWithLang from './LinkWithLang';\n\ninterface Props {\n  author: Author;\n}\n\nconst AnchorAuthor: React.FC<Props> = ({ author }) => {\n  const { t } = useTranslation();\n\n  return (\n    <AvatarWrapper to={`/authors/${kebabCase(author?.id)}`}>\n      <Avatar\n        src={author?.profileImage}\n        text={t(`profile.name.${author?.id}`)}\n      />\n      <AvatarText>{t(`profile.name.${author?.id}`)}</AvatarText>\n    </AvatarWrapper>\n  );\n};\nexport default AnchorAuthor;\n\nconst AvatarWrapper = styled(LinkWithLang)`\n  display: flex;\n  align-items: center;\n  text-decoration: none;\n`;\n\nconst AvatarText = styled.div`\n  ${TextStyles.caption1};\n  margin-left: 6px;\n`;\n","import { Caption1, Card, Colors, CoverRatio, TextStyles } from '@class101/ui';\nimport React from 'react';\nimport styled from 'styled-components';\n\nimport AnchorAuthor from './AnchorAuthor';\nimport LinkWithLang from './LinkWithLang';\n\ninterface Props {\n  node: any;\n}\n\nconst PostCard: React.FC<Props> = props => {\n  const {\n    node: {\n      fields: { slug },\n      frontmatter: { title, description, thumbnail, date, author },\n      excerpt\n    }\n  } = props;\n\n  return (\n    <Anchor to={`/${slug}`}>\n      <Card\n        coverImage={thumbnail}\n        coverImageRatio={CoverRatio.RATIO_4X3}\n        title={title}\n        extraTop={<CardCaption>{date}</CardCaption>}\n        extraBottom={\n          <React.Fragment>\n            <CardDescription>{description || excerpt}</CardDescription>\n            <AnchorAuthor author={author} />\n          </React.Fragment>\n        }\n      />\n    </Anchor>\n  );\n};\n\nexport default PostCard;\n\nconst Anchor = styled(LinkWithLang)`\n  display: block;\n  text-decoration: none;\n  text-decoration: none;\n  margin-bottom: 16px;\n  &:hover {\n    color: inherit;\n  }\n`;\n\nconst CardCaption = styled(Caption1)`\n  color: ${Colors.gray900};\n  font-weight: 600;\n`;\n\nconst CardDescription = styled.div`\n  ${TextStyles.caption1}\n  color: ${Colors.gray800};\n  margin-bottom: 16px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  letter-spacing: none;\n  display: -webkit-box;\n  -webkit-line-clamp: 3; \n  -webkit-box-orient: vertical;\n  word-wrap: break-word;\n`;\n","import { Col, Grid, Row } from '@class101/ui';\nimport { graphql } from 'gatsby';\nimport React from 'react';\n\nimport Layout from '../components/Layout';\nimport PostCard from '../components/PostCard';\nimport { Edge } from '../graphql-types';\n\n// Components\ninterface Props {\n  data: {\n    allMarkdownRemark: {\n      totalCount: number;\n      edges: Edge[];\n    };\n  };\n  pageContext: {\n    slug: string;\n  };\n}\n\nconst AuthorTemplate: React.FC<Props> = props => {\n  const { pageContext, data } = props;\n  const { slug } = pageContext;\n  const edges =\n    data.allMarkdownRemark && data.allMarkdownRemark.edges\n      ? data.allMarkdownRemark.edges\n      : [];\n  return (\n    <Layout>\n      {/* <SEO title={user.name} pathname={slug} /> */}\n      <Grid>\n        <Row>\n          <Col>{/* <Bio user={user} /> */}</Col>\n        </Row>\n        <Row>\n          {edges.map(({ node }) => (\n            <Col key={node.fields.slug} md={12} lg={4}>\n              <PostCard node={node} />\n            </Col>\n          ))}\n        </Row>\n      </Grid>\n    </Layout>\n  );\n};\n\nexport default AuthorTemplate;\n\nexport const pageQuery = graphql`\n  query($authorId: String!, $language: String!) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {\n        fields: { language: { eq: $language }, authorId: { eq: $authorId } }\n      }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt(pruneLength: 300, truncate: true)\n          fields {\n            slug\n            language\n          }\n          frontmatter {\n            date(formatString: \"YYYY-MM-DD\")\n            title\n            description\n            thumbnail\n            author {\n              id\n              profileImage\n              description\n              github\n              blog\n              linkedin\n            }\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}