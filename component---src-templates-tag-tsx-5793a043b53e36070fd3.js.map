{"version":3,"sources":["webpack:///./src/templates/tag.tsx","webpack:///./src/utils/getTagText.ts","webpack:///./src/components/AnchorAuthor.tsx","webpack:///./src/components/PostCard.tsx"],"names":["TagTemplate","props","pageContext","data","tag","slug","allMarkdownRemark","edges","totalCount","tagText","getTagText","title","pathname","SiteTitle","SiteContent","ViewAllTagLink","to","map","node","key","fields","md","lg","pageQuery","styled","Headline1","Body2","Colors","gray700","LinkWithLang","gray800","TAG_TEXT","recruiting","_","startCase","AnchorAuthor","author","t","useTranslation","AvatarWrapper","kebabCase","id","src","profileImage","text","AvatarText","div","TextStyles","caption1","Anchor","PostCard","frontmatter","description","thumbnail","date","excerpt","coverImage","coverImageRatio","CoverRatio","RATIO_4X3","extraTop","CardCaption","extraBottom","Fragment","CardDescription","Caption1","gray900"],"mappings":"2FAAA,8JAyDeA,UA/BsB,SAAAC,GAAS,IACpCC,EAAsBD,EAAtBC,YAAaC,EAASF,EAATE,KACbC,EAAcF,EAAdE,IAAKC,EAASH,EAATG,KAF+B,EAGdF,EAAKG,kBAA3BC,EAHoC,EAGpCA,MAAOC,EAH6B,EAG7BA,WACTC,EAAUC,YAAWN,GAC3B,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKO,MAAK,GAAKF,EAAWG,SAAUP,IACpC,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAACQ,EAAD,KAAYJ,GACZ,kBAACK,EAAD,UACKN,EADL,eAC4B,6BAC1B,6BACA,kBAACO,EAAD,CAAgBC,GAAE,SAAlB,eAIN,kBAAC,IAAD,KACGT,EAAMU,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OACT,kBAAC,IAAD,CAAKC,IAAKD,EAAKE,OAAOf,KAAMgB,GAAI,GAAIC,GAAI,GACtC,kBAAC,IAAD,CAAUJ,KAAMA,YAWvB,IAAMK,EAAY,aAuCnBV,EAAYW,YAAOC,KAAV,iEAAGD,CAAH,wCAKTV,EAAcU,YAAOE,KAAV,mEAAGF,CAAH,iDAGNG,IAAOC,SAGZb,EAAiBS,YAAOK,KAAV,sEAAGL,CAAH,uEACTG,IAAOG,U,oCC9GlB,yBAEMC,EAAsC,CAC1CC,WAAY,QACZ,cAAe,QAGF,aAAC5B,GAAD,OAAiB2B,EAAS3B,IAAQ6B,IAAEC,UAAU9B,K,gICoB9C+B,EAbuB,SAAC,GAAe,IAAbC,EAAa,EAAbA,OAC/BC,EAAMC,cAAND,EAER,OACE,kBAACE,EAAD,CAAevB,GAAE,YAAcwB,IAAUJ,aAAD,EAACA,EAAQK,KAC/C,kBAAC,IAAD,CACEC,IAAKN,aAAF,EAAEA,EAAQO,aACbC,KAAMP,EAAE,iBAAgBD,aAAjB,EAAiBA,EAAQK,OAElC,kBAACI,EAAD,KAAaR,EAAE,iBAAgBD,aAAjB,EAAiBA,EAAQK,QAMvCF,EAAgBf,YAAOK,KAAV,kFAAGL,CAAH,2DAMbqB,EAAarB,IAAOsB,IAAV,+EAAGtB,CAAH,yBACZuB,IAAWC,UCITC,GAFSC,IA3BmB,SAAAjD,GAAS,MAOrCA,EALFiB,KACYb,EAH2B,EAGrCe,OAAUf,KAH2B,IAIrC8C,YAAexC,EAJsB,EAItBA,MAAOyC,EAJe,EAIfA,YAAaC,EAJE,EAIFA,UAAWC,EAJT,EAISA,KAAMlB,EAJf,EAIeA,OACpDmB,EALqC,EAKrCA,QAIJ,OACE,kBAACN,EAAD,CAAQjC,GAAE,IAAMX,GACd,kBAAC,IAAD,CACEmD,WAAYH,EACZI,gBAAiBC,IAAWC,UAC5BhD,MAAOA,EACPiD,SAAU,kBAACC,EAAD,KAAcP,GACxBQ,YACE,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAD,KAAkBZ,GAAeG,GACjC,kBAAC,EAAD,CAAcnB,OAAQA,SAUnBZ,YAAOK,KAAV,uEAAGL,CAAH,yGAUNqC,EAAcrC,YAAOyC,KAAV,4EAAGzC,CAAH,+BACNG,IAAOuC,SAIZF,EAAkBxC,IAAOsB,IAAV,gFAAGtB,CAAH,2LACjBuB,IAAWC,SACJrB,IAAOG","file":"component---src-templates-tag-tsx-5793a043b53e36070fd3.js","sourcesContent":["import { Body2, Col, Colors, Grid, Headline1, Row } from '@class101/ui';\nimport { graphql } from 'gatsby';\nimport React from 'react';\nimport styled from 'styled-components';\n\nimport Layout from '../components/Layout';\nimport LinkWithLang from '../components/LinkWithLang';\nimport PostCard from '../components/PostCard';\nimport SEO from '../components/SEO';\nimport { Edge } from '../graphql-types';\nimport getTagText from '../utils/getTagText';\n\n// Components\ninterface Props {\n  data: {\n    allMarkdownRemark: {\n      totalCount: number;\n      edges: Edge[];\n    };\n  };\n  pageContext: {\n    tag: string;\n    slug: string;\n  };\n}\n\nconst TagTemplate: React.FC<Props> = props => {\n  const { pageContext, data } = props;\n  const { tag, slug } = pageContext;\n  const { edges, totalCount } = data.allMarkdownRemark;\n  const tagText = getTagText(tag);\n  return (\n    <Layout>\n      <SEO title={`${tagText}`} pathname={slug} />\n      <Grid>\n        <Row>\n          <Col>\n            <SiteTitle>{tagText}</SiteTitle>\n            <SiteContent>\n              총 {totalCount}개의 글이 있습니다. <br />\n              <br />\n              <ViewAllTagLink to={`/tags`}>모든 태그 보기</ViewAllTagLink>\n            </SiteContent>\n          </Col>\n        </Row>\n        <Row>\n          {edges.map(({ node }) => (\n            <Col key={node.fields.slug} md={12} lg={4}>\n              <PostCard node={node} />\n            </Col>\n          ))}\n        </Row>\n      </Grid>\n    </Layout>\n  );\n};\n\nexport default TagTemplate;\n\nexport const pageQuery = graphql`\n  query($tag: String, $language: String!) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {\n        frontmatter: { tags: { in: [$tag] } }\n        fields: { language: { eq: $language } }\n      }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt(pruneLength: 300, truncate: true)\n          fields {\n            slug\n            language\n          }\n          frontmatter {\n            date(formatString: \"YYYY-MM-DD\")\n            title\n            description\n            thumbnail\n            author {\n              id\n              profileImage\n              description\n              github\n              blog\n              linkedin\n            }\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst SiteTitle = styled(Headline1)`\n  font-size: 36px;\n  margin-bottom: 16px;\n`;\n\nconst SiteContent = styled(Body2)`\n  font-size: 17px;\n  margin-bottom: 62px;\n  color: ${Colors.gray700};\n`;\n\nconst ViewAllTagLink = styled(LinkWithLang)`\n  color: ${Colors.gray800};\n  text-decoration: none;\n  &:hover {\n    text-decoration: underline;\n  }\n`;\n","import _ from 'lodash';\n\nconst TAG_TEXT: { [key: string]: string } = {\n  recruiting: '채용 공고',\n  'open source': '오픈소스',\n};\n\nexport default (tag: string) => TAG_TEXT[tag] || _.startCase(tag);\n","import { Avatar, TextStyles } from '@class101/ui';\nimport { t } from 'i18next';\nimport kebabCase from 'lodash/kebabCase';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport styled from 'styled-components';\n\nimport { Author } from '../graphql-types';\nimport LinkWithLang from './LinkWithLang';\n\ninterface Props {\n  author: Author;\n}\n\nconst AnchorAuthor: React.FC<Props> = ({ author }) => {\n  const { t } = useTranslation();\n\n  return (\n    <AvatarWrapper to={`/authors/${kebabCase(author?.id)}`}>\n      <Avatar\n        src={author?.profileImage}\n        text={t(`profile.name.${author?.id}`)}\n      />\n      <AvatarText>{t(`profile.name.${author?.id}`)}</AvatarText>\n    </AvatarWrapper>\n  );\n};\nexport default AnchorAuthor;\n\nconst AvatarWrapper = styled(LinkWithLang)`\n  display: flex;\n  align-items: center;\n  text-decoration: none;\n`;\n\nconst AvatarText = styled.div`\n  ${TextStyles.caption1};\n  margin-left: 6px;\n`;\n","import { Caption1, Card, Colors, CoverRatio, TextStyles } from '@class101/ui';\nimport React from 'react';\nimport styled from 'styled-components';\n\nimport AnchorAuthor from './AnchorAuthor';\nimport LinkWithLang from './LinkWithLang';\n\ninterface Props {\n  node: any;\n}\n\nconst PostCard: React.FC<Props> = props => {\n  const {\n    node: {\n      fields: { slug },\n      frontmatter: { title, description, thumbnail, date, author },\n      excerpt\n    }\n  } = props;\n\n  return (\n    <Anchor to={`/${slug}`}>\n      <Card\n        coverImage={thumbnail}\n        coverImageRatio={CoverRatio.RATIO_4X3}\n        title={title}\n        extraTop={<CardCaption>{date}</CardCaption>}\n        extraBottom={\n          <React.Fragment>\n            <CardDescription>{description || excerpt}</CardDescription>\n            <AnchorAuthor author={author} />\n          </React.Fragment>\n        }\n      />\n    </Anchor>\n  );\n};\n\nexport default PostCard;\n\nconst Anchor = styled(LinkWithLang)`\n  display: block;\n  text-decoration: none;\n  text-decoration: none;\n  margin-bottom: 16px;\n  &:hover {\n    color: inherit;\n  }\n`;\n\nconst CardCaption = styled(Caption1)`\n  color: ${Colors.gray900};\n  font-weight: 600;\n`;\n\nconst CardDescription = styled.div`\n  ${TextStyles.caption1}\n  color: ${Colors.gray800};\n  margin-bottom: 16px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  letter-spacing: none;\n  display: -webkit-box;\n  -webkit-line-clamp: 3; \n  -webkit-box-orient: vertical;\n  word-wrap: break-word;\n`;\n"],"sourceRoot":""}