{"version":3,"sources":["webpack:///./src/components/HeroSection.tsx","webpack:///./src/components/Paginator.tsx","webpack:///./src/templates/posts.tsx","webpack:///./src/components/AnchorAuthor.tsx","webpack:///./src/components/PostCard.tsx"],"names":["HeroSection","render","Container","HeroImage","src","InnerHeroContainer","color","ButtonColor","ORANGE","size","rightIcon","Arrow","href","style","marginBottom","React","PureComponent","styled","div","img","TextStyles","headline1","Paginator","numPages","currentPage","links","i","push","Anchor","key","className","to","DEFAULT","ButtonSize","XSMALL","PaginationWrapper","LinkWithLang","PostsTemplate","props","edges","data","allMarkdownRemark","pageContext","Layout","SEO","title","map","node","fields","slug","md","lg","PostCard","pageQuery","AnchorAuthor","author","t","useTranslation","AvatarWrapper","kebabCase","id","profileImage","text","AvatarText","caption1","frontmatter","description","thumbnail","date","excerpt","coverImage","coverImageRatio","CoverRatio","RATIO_4X3","extraTop","CardCaption","extraBottom","Fragment","CardDescription","Caption1","Colors","gray900","gray800"],"mappings":"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","file":"component---src-templates-posts-tsx-9a2c2f6ceb4e8c8ca0a1.js","sourcesContent":["import { Button, ButtonColor, Grid, Icon, TextStyles } from '@class101/ui';\nimport React from 'react';\nimport styled from 'styled-components';\n\nexport default class HeroSection extends React.PureComponent {\n  public render() {\n    return (\n      <Container>\n        <HeroImage src=\"/images/hero-image-lg.png\" />\n        <InnerHeroContainer>\n          <Grid>\n            <h1>신나는 코딩세상</h1>\n            <h3>\n              모든 사람이 사랑하는 일을 하며 살 수 있는 세상을 꿈꿉니다. <br />\n              당신이 만약 이 꿈에 관심이 있다면,\n            </h3>\n            <Button\n              color={ButtonColor.ORANGE}\n              size=\"lg\"\n              rightIcon={<Icon.Arrow />}\n              href=\"https://www.rocketpunch.com/companies/class101/jobs\"\n            >\n              <span style={{ marginBottom: 2, color: 'white' }}>\n                진행중인 채용 보기\n              </span>\n            </Button>\n          </Grid>\n        </InnerHeroContainer>\n      </Container>\n    );\n  }\n}\n\nconst Container = styled.div`\n  position: relative;\n  width: 100%;\n  height: 45vh;\n  margin: 0 0 64px;\n`;\n\nconst HeroImage = styled.img`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n`;\n\nconst InnerHeroContainer = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  padding: 96px 24px;\n  color: white;\n  h1 {\n    ${TextStyles.headline1};\n    color: white;\n  }\n`;\n","import { Button, ButtonColor, ButtonSize } from '@class101/ui';\nimport React from 'react';\nimport styled from 'styled-components';\n\nimport LinkWithLang from './LinkWithLang';\n\ninterface Props {\n  numPages: number;\n  currentPage: number;\n}\n\nconst Paginator: React.FC<Props> = ({ numPages, currentPage }) => {\n  const links = [];\n  for (let i = 0; i < numPages; i += 1) {\n    links.push(\n      <Anchor\n        key={i}\n        className={i === currentPage - 1 ? 'active' : ''}\n        to={`/${i === 0 ? '/' : `/blog/${i + 1}`}`}\n      >\n        <Button\n          color={\n            i === currentPage - 1 ? ButtonColor.ORANGE : ButtonColor.DEFAULT\n          }\n          size={ButtonSize.XSMALL}\n        >\n          {i + 1}\n        </Button>\n      </Anchor>\n    );\n  }\n\n  return <PaginationWrapper>{links}</PaginationWrapper>;\n};\n\nexport default Paginator;\n\nconst PaginationWrapper = styled.div`\n  text-align: center;\n`;\n\nconst Anchor = styled(LinkWithLang)`\n  padding: 8px 14px;\n  margin: 4px;\n  text-decoration: none;\n  &:hover {\n    color: inherit;\n  }\n`;\n","import { Col, Grid, Row } from '@class101/ui';\nimport { graphql } from 'gatsby';\nimport React from 'react';\nimport { RouteComponentProps } from 'react-router';\n\nimport HeroSection from '../components/HeroSection';\nimport Layout from '../components/Layout';\nimport Paginator from '../components/Paginator';\nimport PostCard from '../components/PostCard';\nimport SEO from '../components/SEO';\nimport { Edge, Site } from '../graphql-types';\n\ninterface Props {\n  data: {\n    site: Site;\n    allMarkdownRemark: {\n      edges: Edge[];\n    };\n  };\n  pageContext: {\n    isCreatedByStatefulCreatePages: boolean;\n    numPages: number;\n    currentPage: number;\n    limit: number;\n    skip: number;\n    language: string;\n  };\n}\n\nconst PostsTemplate: React.FC<RouteComponentProps & Props> = props => {\n  const {\n    data: {\n      allMarkdownRemark: { edges }\n    },\n    pageContext: { numPages, currentPage }\n  } = props;\n\n  return (\n    <Layout>\n      <SEO title=\"Home\" />\n      <HeroSection />\n      <Grid>\n        <Row>\n          {edges.map(({ node }) => (\n            <Col key={node.fields.slug} md={6} lg={3}>\n              <PostCard node={node} />\n            </Col>\n          ))}\n          <Col md={12}>\n            <Paginator numPages={numPages} currentPage={currentPage} />\n          </Col>\n        </Row>\n      </Grid>\n      <br />\n    </Layout>\n  );\n};\n\nexport default PostsTemplate;\n\nexport const pageQuery = graphql`\n  query PostsTemplateQuery($skip: Int!, $limit: Int!, $language: String!) {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n      filter: { fields: { language: { eq: $language } } }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 500, truncate: true)\n          fields {\n            slug\n            language\n          }\n          frontmatter {\n            date(formatString: \"YYYY-MM-DD\")\n            title\n            description\n            thumbnail\n            author {\n              id\n              profileImage\n            }\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n","import { Avatar, TextStyles } from '@class101/ui';\nimport { t } from 'i18next';\nimport kebabCase from 'lodash/kebabCase';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport styled from 'styled-components';\n\nimport { Author } from '../graphql-types';\nimport LinkWithLang from './LinkWithLang';\n\ninterface Props {\n  author: Author;\n}\n\nconst AnchorAuthor: React.FC<Props> = ({ author }) => {\n  const { t } = useTranslation();\n\n  return (\n    <AvatarWrapper to={`/authors/${kebabCase(author?.id)}`}>\n      <Avatar\n        src={author?.profileImage}\n        text={t(`profile.name.${author?.id}`)}\n      />\n      <AvatarText>{t(`profile.name.${author?.id}`)}</AvatarText>\n    </AvatarWrapper>\n  );\n};\nexport default AnchorAuthor;\n\nconst AvatarWrapper = styled(LinkWithLang)`\n  display: flex;\n  align-items: center;\n  text-decoration: none;\n`;\n\nconst AvatarText = styled.div`\n  ${TextStyles.caption1};\n  margin-left: 6px;\n`;\n","import { Caption1, Card, Colors, CoverRatio, TextStyles } from '@class101/ui';\nimport React from 'react';\nimport styled from 'styled-components';\n\nimport AnchorAuthor from './AnchorAuthor';\nimport LinkWithLang from './LinkWithLang';\n\ninterface Props {\n  node: any;\n}\n\nconst PostCard: React.FC<Props> = props => {\n  const {\n    node: {\n      fields: { slug },\n      frontmatter: { title, description, thumbnail, date, author },\n      excerpt\n    }\n  } = props;\n\n  return (\n    <Anchor to={`/${slug}`}>\n      <Card\n        coverImage={thumbnail}\n        coverImageRatio={CoverRatio.RATIO_4X3}\n        title={title}\n        extraTop={<CardCaption>{date}</CardCaption>}\n        extraBottom={\n          <React.Fragment>\n            <CardDescription>{description || excerpt}</CardDescription>\n            <AnchorAuthor author={author} />\n          </React.Fragment>\n        }\n      />\n    </Anchor>\n  );\n};\n\nexport default PostCard;\n\nconst Anchor = styled(LinkWithLang)`\n  display: block;\n  text-decoration: none;\n  text-decoration: none;\n  margin-bottom: 16px;\n  &:hover {\n    color: inherit;\n  }\n`;\n\nconst CardCaption = styled(Caption1)`\n  color: ${Colors.gray900};\n  font-weight: 600;\n`;\n\nconst CardDescription = styled.div`\n  ${TextStyles.caption1}\n  color: ${Colors.gray800};\n  margin-bottom: 16px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  letter-spacing: none;\n  display: -webkit-box;\n  -webkit-line-clamp: 3; \n  -webkit-box-orient: vertical;\n  word-wrap: break-word;\n`;\n"],"sourceRoot":""}