{"componentChunkName":"component---src-templates-posts-tsx","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"클래스101 기술 블로그","description":"신나는 코딩 세상"}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"Overview 개발자들은 느낄 겁니다. 몇 달만 지나도 새로운 프레임워크나 언어가 나오고, 개발 방향을 잡아주는 개발 방법론에도 트렌드가 있다는 것을 말이죠. 요즘은 TDD(Test Driven Development)가 큰 인기를 휩쓸고 있습니다.  TDD는 간단하게 이야기해서 테스트가 개발을 이끈다고 해서, 테스트 코드를 먼저 짜고 그 다음 메인 코드를 짜는 방식으로 개발을 진행합니다. 테스트를 먼저 짜게 되면서 자연스럽게 예외 상황과 동작 방식을 생각하게 되어 메인 코드를 작성할 때 더 좋은 코드가 나올 수 있습니다. 또한 팀 내 개발자가 코드를 잘못 건드리더라도 테스트를 통과하지 못하기에 빠르게 문제 원인을 찾고 해결할 수 있습니다. 이는 사이드 이펙트를 줄이는데도 큰 도움이 될 것입니다. (전제 조건은 좋은 테스트 코드를 짜는 것입니다.) 클래스101이 테스트를 도입하게 된 계기 우리는 기술의 ‘안정성’과 ‘기능 개발’ 두 가지를 모두 잡기 위해 고군분투하고 있습니다. 하…","fields":{"slug":"blog/2019/09/09/grep","language":"ko"},"frontmatter":{"date":"2019-09-09","title":"Node.js Typescript & GraphQL환경에서 테스트 작성하기","description":"","thumbnail":"/images/default.jpg","author":{"id":"grep","profileImage":"/images/profiles/grep.png"},"tags":["typescript","tdd","nodejs","graphql"]}}},{"node":{"excerpt":"클래스101을 런칭했을 땐 단 몇 명의 개발자가 서비스를 만들어야 했습니다. GCP’s Firestore(Google Cloud Platform’s Firestore)를 활용해 단 일주일 만에 서버를 구축하지도 않고 서비스를 런칭했죠. 이제 클래스101은 많은 이들의 취미를 찾아주는 서비스가 되었습니다. 그리고 여러 체계가 잡히고 서버도 구축하면서 정들었던 GCP’s Firestore를 떠나보낼 때도 되었습니다. 개발자가 사랑했던 GCP’s Firestore, 어떤 특징이 있을까요? Firestore는 스케일 업, 스케일 아웃과 같은 확장성은 전혀 걱정하지 않아도 되는 키-밸류 저장소입니다. 물론 비용을 제때 내야 합니다. 비용 지불에 문제가 생기면 바로 무료 플랜 limit을 넘어가는 모든 Firestore 요청이 실패할 테니까요. 각종 플랫폼에 SDK가 문서화되어 있고, react-native는 오픈소스인데다 react-native-firebase도 잘 운영되고 있습니다. 개발…","fields":{"slug":"blog/2019/07/24/donut","language":"ko"},"frontmatter":{"date":"2019-07-24","title":"Google Cloud Platform's Firestore의 특징과 한계","description":"","thumbnail":"/images/thumbnails/firestore.jpg","author":{"id":"donut","profileImage":"/images/profiles/donut.jpg"},"tags":["gcp","firestore","firebase"]}}},{"node":{"excerpt":"웹과 모바일 환경이 발달하면서 검색은 가장 중요한 도구가 되었습니다. 역량과 전문성을 드러내고 싶어하는 모든 개인과 기업은 당연히 검색 결과에 관심을 가지기 시작했죠. 이제 사람들은 지식을 외우지 않아도 됩니다. 책장에서 책을 꺼내듯 모르는 것이 있으면 검색만 해도 웬만한 전문가보다 더 많은 지식을 얻을 수 있기 때문입니다. 기업은 사람들의 이러한 행동 변화를 놓치지 않았습니다. 검색이 중요해지다 보니 자연스레 에이전시 형태의 콘텐츠 대행사를 중심으로 콘텐츠 소비자가 주목할 만한 검색어나 키워드, 유행에 따라 콘텐츠를 제작해 단기적으로 조회 수, 댓글 수 등을 온라인 영향력의 기준으로 삼았습니다. 하지만 디지털 시대에 단기적 성과를 달성하기 위한 수치들이 진정으로 개인과 기업의 온라인 영향력 확장에 도움이 되는 걸까요? 만약 노출 수, 조회 수와 같은 수치가 성과의 기준이 된다면 당연히 광고홍보비용을 많이 투자한 기업이 온라인의 승자가 될 게 분명합니다. 그렇다고 검색 결과 화면을…","fields":{"slug":"blog/2019/07/18/john","language":"ko"},"frontmatter":{"date":"2019-07-18","title":"기술 블로그를 왜 운영해야 할까?","description":"","thumbnail":"/images/thumbnails/tech-blog.png","author":{"id":"john","profileImage":"/images/profiles/john.png"},"tags":["tech blog"]}}},{"node":{"excerpt":"Overview 클래스101에서 추천 서버를 담당하고 있는 Esmond입니다. 최근에 TF-IDF(Term Frequency - Inverse Document Frequency)를 활용해 클래스 간의 유사도를 분석하고 이를 API로 올렸습니다. 그 개발 과정과 이를 통해 앞으로 개선할 점을 두 편의 글로 쓰겠습니다. 개발 배경 및 목표 클래스101 앱에서 볼 수 있는 수백 개의 클래스를 어떻게 분류할 수 있을까요? 우리는 크게 두 가지의 기준을 가지고 있습니다. 첫째, 클래스가 처음 제작될 때 지정되는 클래스의 카테고리로 분류한다. 둘째, 클래스 오픈이 확정된 이후 비슷한 주제로 엮이는 클래스의 컬렉션으로 분류한다. 요즘은 클래스101이 빠르게 성장하면서 늘어난 유저에게 카테고리나 컬렉션과 같이 간단한 추천만 하기엔 역부족으로 보입니다. 보다 구체적으로 추천할 수 있는 로직이 필요해졌기에, 개발팀에서는 ‘클래스 간의 유사도’라는 지표를 분석하고 활용해보기로 결정했습니다. 이번 개발…","fields":{"slug":"blog/2019/07/16/esmond","language":"ko"},"frontmatter":{"date":"2019-07-16","title":"TF-IDF를 활용한 클래스 유사도 분석과 추천 서버 구축 1편","description":"","thumbnail":"/images/thumbnails/tf-idf.png","author":{"id":"esmond","profileImage":"/images/profiles/esmond.png"},"tags":["typescript","monorepo"]}}},{"node":{"excerpt":"편집자 주 ‘Python’은 독자의 가독성을 높이기 위해 글의 제목과 코드를 제외한 본문 전체에서 ‘파이썬’으로 한글 표기함. 이는 외래어 표기법 상 관용에 해당함. Overview 개발자가 3년 정도의 경력을 쌓으면 새로운 개발을 꿈꿉니다. 저도 마찬가지였습니다. 활기찬 스타트업에서 웹 백엔드를 맡아 개발하고 싶은 마음이 생겨났죠. 클래스101으로 이직한 이유이기도 합니다. 그렇다면 파이썬(Python)과 JS(JavaScript), TS(TypeScript)가 언어적으로 무엇이 다를까요. 크게 네 가지로 알아보겠습니다. 혹시 저처럼 서버 개발자에서 웹 백엔드 개발자로 새로운 일에 도전해보고 싶다면 이번 글이 분명 도움이 될 겁니다. Dictionary 사용법 Dictionary는 데이터의 가공과 저장이 편리합니다. 개발자들이 자주 쓰는 타입이기도 하죠. 보통 맵의 key를 순회시키면 아래와 같이 씁니다. 하지만 JS에서는 아래와 같이 씁니다. 해당 객체의 method가 아닌 를…","fields":{"slug":"blog/2019/07/16/lama","language":"ko"},"frontmatter":{"date":"2019-07-16","title":"Python 서버 개발자 관점에서 본 TypeScript, JavaScript","description":"","thumbnail":"/images/thumbnails/typescript.png","author":{"id":"lama","profileImage":"/images/profiles/lama.jpg"},"tags":["typescript","javascript"]}}},{"node":{"excerpt":"Jump to Monorepo 편집자 주\n‘Monorepo’는 독자의 가독성을 높이기 위해 글의 제목을 제외한 본문 전체에서 ‘모노레포’로 한글 표기함. 이는 외래어 표기법 상 관용에 해당함. Overview 이번 글에서는 모노레포를 도입한 계기와 장・단점, Git history를 보존한 채 레포지토리를 합치는 방법을 다루겠습니다. 모노레포의 이해 모노레포는 두 개 이상의 프로젝트 코드를 하나의 레포지토리에서 관리하는 기법입니다.1 페이스북이나 구글, 마이크로소프트 등 대형 소프트웨어 기업에서도 사용되고 있고, 일부 인기 있는 오픈 소스 프로젝트들도 그들의 레포지토리를 관리하기 위해 Monorepo를 쓰고 있습니다. 그렇다면 클래스101에서는 왜 모노레포가 필요할까요? 우선 그 특징부터 살펴보겠습니다. 모노레포의 특징 코드의 재사용 여러 레포지토리에서 프로젝트를 진행하면 비슷한 로직을 각 레포지토리에서 중복 구현하는 때가 많습니다. 공통 로직을 다시 작성하지 않고 공유하려면 레포지…","fields":{"slug":"blog/2019/07/12/tony","language":"ko"},"frontmatter":{"date":"2019-07-12","title":"Monorepo with typescript (1)","description":"","thumbnail":"/images/thumbnails/monorepo.png","author":{"id":"tony","profileImage":"/images/profiles/tony.png"},"tags":["typescript","monorepo","lerna","git"]}}}]}},"pageContext":{"limit":8,"skip":0,"language":"ko","numPages":1,"currentPage":1}}}