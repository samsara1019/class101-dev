{"componentChunkName":"component---src-templates-post-tsx","path":"/en/blog/2019/07/16/lama/","result":{"data":{"site":{"siteMetadata":{"title":"클래스101 기술 블로그","author":"class101","siteUrl":"https://class101.dev"}},"markdownRemark":{"id":"d9544fe2-2d63-5209-b9b0-ca88b51990bf","tableOfContents":"<ul>\n<li><a href=\"/blog/2019/07/16/lama/#overview\">Overview</a></li>\n<li><a href=\"/blog/2019/07/16/lama/#how-to-use-dictionary\">How to use Dictionary</a></li>\n<li><a href=\"/blog/2019/07/16/lama/#type-transition\">Type Transition</a></li>\n<li><a href=\"/blog/2019/07/16/lama/#function-abbreviation\">Function Abbreviation</a></li>\n<li><a href=\"/blog/2019/07/16/lama/#ts-for-lowering-error-rate\">TS for lowering error rate</a></li>\n<li><a href=\"/blog/2019/07/16/lama/#conclusion\">Conclusion</a></li>\n<li><a href=\"/blog/2019/07/16/lama/#refrence\">Refrence</a></li>\n</ul>","excerpt":"Overview When developers build their career around three years, they want to try new things. Same here too, I wanted to take part in web backend at active startup company; and it brought me to CLAA101. Then what is the difference between Python, JS (JavaScript), and TS (TypeScript)? Let’s see the d…","html":"<h2>Overview</h2>\n<p>When developers build their career around three years, they want to try new things. Same here too, I wanted to take part in web backend at active startup company; and it brought me to CLAA101. Then what is the difference between Python, JS (JavaScript), and TS (TypeScript)? Let’s see the difference in four aspects. I believe this content will certainly help you if you are looking for a new career from server developer to web backend developer. </p>\n<h2>How to use Dictionary</h2>\n<p>Dictionary is convenient to store and process data. Therefore, developers frequently use this type. Usually, we write as below to circulate the map’s key. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">sample_dictionary <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> key <span class=\"token keyword\">in</span> sample_dictionary<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span></code></pre></div>\n<p>However, in JS, we write as below.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> sample_dictionary <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">A</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>sample_dictionary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>It gets key by using <code class=\"language-text\">object.keys()</code>, not by the object’s method. It is because JS treat the variable as Object while Python treats it as a Dictionary or Map. Thus, a key is treated as an attribute, and we can make, call, or set the object like below. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> sample_dictionary <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">A</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"\" 을 꼭 붙히지 않아도 속성이기때문에 상관없음</span>\n\n<span class=\"token comment\">// Set</span>\nsample_dictionary<span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 가능</span>\nsample_dictionary<span class=\"token punctuation\">.</span><span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 가능</span>\n\n<span class=\"token comment\">// Get</span>\nsample_dictionary<span class=\"token punctuation\">[</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nsample_dictionary<span class=\"token punctuation\">.</span><span class=\"token constant\">A</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 가능</span></code></pre></div>\n<h2>Type Transition</h2>\n<p>There has been a lot of opinion regarding type transition of JS. Even the meme was made. </p>\n<p>[그림1]</p>\n<p> Like picture 1, in JS, there is a type transition for the comparison process. Thus, I got feedback to be careful of transition at my first code review. If you are not using code alone, we should consider the result of type transition by using ==. Therefore, it is correct to use ===(strict equal)</p>\n<h2>Function Abbreviation</h2>\n<p>We can use an anonymous function such as Lambda in Python. However, it is only possible when we are working for a simple task, and hard to write simple or long like usage of .map or => in JS. According to the source below, in Python, we can check that it is difficult to use lambda or comprehension when two tasks have to be done in one loop. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">sample_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">]</span>\n    result_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">for</span> sample <span class=\"token keyword\">in</span> sample_data<span class=\"token punctuation\">:</span>\n        temp_calc <span class=\"token operator\">=</span> sample<span class=\"token punctuation\">.</span>do_something<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        temp_calc_after_something <span class=\"token operator\">=</span> another_something<span class=\"token punctuation\">(</span>temp_calc<span class=\"token punctuation\">)</span>\n        result_data<span class=\"token punctuation\">.</span>appned<span class=\"token punctuation\">(</span>temp_calc<span class=\"token punctuation\">)</span></code></pre></div>\n<p>However, we can reduce the form in JS.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> sample_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> result_data <span class=\"token operator\">=</span> sample_data<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">iter</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> temp_calc <span class=\"token operator\">=</span> <span class=\"token function\">do_something</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> temp_calc_after_something <span class=\"token operator\">=</span> <span class=\"token function\">another_something</span><span class=\"token punctuation\">(</span>temp_calc<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>TS for lowering error rate</h2>\n<p>TS is a language that supplemented Type check function to JavaScript to overcome the drawback of JS. CLASS101 system is based on TS. It was unfamiliar to use TS at first. I need to put more effort to subtract interface, adjust return and factor type. </p>\n<p>However, TS help us to easily handle the several cases from None problem of Python to the undefined, null problem of JS. Although it would take some time to adapt in TS system, adoption of TS will definitely a good alternative to lower the error rate.</p>\n<h2>Conclusion</h2>\n<p>Until now, we have look through the difference between TS and JS. For me, it was very useful to understand the difference and use both languages. I believe the better code would be made through the deeper understanding of development language though some people say ‘language is just a tool’. I hope you to become familiar with TS, JS through this chance. </p>\n<h2>Refrence</h2>\n<p><strong>Website</strong>\nJavaScript 객체 기본, MDN web docs, <a href=\"https://developer.mozilla.org/ko/docs/Learn/JavaScript/Objects/Basics\" target=\"_blank\" rel=\"nofollow\">https:// developer.mozilla.org/ko/docs/Learn/JavaScript/Objects/Basics</a> 참조. (2019.07.12)</p>","fields":{"slug":"blog/2019/07/16/lama","language":"en"},"frontmatter":{"title":"Usage of TypeScript and JavaScript from the Python Server Developer’s point of view","thumbnail":"/images/thumbnails/typescript.png","date":"2019-07-16","description":"","author":{"id":"lama","profileImage":"/images/profiles/lama.jpg","description":"넓은 경험을 가지고 싶은 개발자입니다.","github":"","blog":"","linkedin":""},"tags":["typescript","javascript"]}}},"pageContext":{"slug":"blog/2019/07/16/lama","language":"en","previous":null,"next":{"fields":{"slug":"blog/2019/07/16/esmond","authorId":"esmond","language":"en"},"frontmatter":{"title":"Class similarity analysis and construction of Recommendation server using TF-IDF [Part 1]","thumbnail":"/images/thumbnails/tf-idf.png","author":{"id":"esmond","profileImage":"/images/profiles/esmond.png","description":"안녕하세요. 애즈먼입니다.","github":"https://github.com/EsmondCho","blog":"","linkedin":"https://www.linkedin.com/in/esmond-cho-705bba168/"},"tags":["typescript","monorepo"],"description":"","date":"2019-07-16T22:12:03.284Z"}}}}}